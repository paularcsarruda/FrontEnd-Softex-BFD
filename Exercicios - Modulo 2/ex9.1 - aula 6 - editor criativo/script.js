// üéØ COME√áO DO NOSSO C√ìDIGO - VAMOS EXPLICAR CADA PARTE!
console.log('üöÄ Iniciando nosso Editor Criativo!');
// ============================================
// üîπ PARTE 1: SELECIONAR TODOS OS ELEMENTOS
// ============================================
// √Årea de texto e visualiza√ß√£o
const areaTexto = document.getElementById('areaTexto');
const textoPreview = document.getElementById('textoPreview');
const contadorCaracteres = document.getElementById('contadorCaracteres');
const contadorPalavras = document.getElementById('contadorPalavras');
const contadorLinhas = document.getElementById('contadorLinhas');
// Bot√µes de estilo
const btnNegrito = document.getElementById('btnNegrito');
const btnItalico = document.getElementById('btnItalico');
const btnSublinhado = document.getElementById('btnSublinhado');
const btnEsquerda = document.getElementById('btnEsquerda');
const btnCentro = document.getElementById('btnCentro');
const btnDireita = document.getElementById('btnDireita');
// Controles
const selectFonte = document.getElementById('selectFonte');
const corTexto = document.getElementById('corTexto');
const tamanhoFonte = document.getElementById('tamanhoFonte');
const valorTamanho = document.getElementById('valorTamanho');
const nomeCor = document.getElementById('nomeCor');
// Bot√µes criativos
const btnEmojis = document.getElementById('btnEmojis');
const btnBorda = document.getElementById('btnBorda');
const btnSombra = document.getElementById('btnSombra');
// Temas
const botoesTemas = document.querySelectorAll('.btn-tema');
// Controles finais
const btnSalvar = document.getElementById('btnSalvar');
const btnLimpar = document.getElementById('btnLimpar');
const btnCopiar = document.getElementById('btnCopiar');
// Mensagem
const mensagem = document.getElementById('mensagem');
console.log('‚úÖ Todos os elementos selecionados!');
// ============================================
// üîπ PARTE 2: VARI√ÅVEIS PARA GUARDAR CONFIGURA√á√ïES
// ============================================
let config = {
estilos: {
negrito: false,
italico: false,
sublinhado: false,
borda: false,
sombra: false,
alinhamento: 'left' 
},
fonte: 'Arial',
cor: '#000000',
tamanho: 16,
tema: 'claro'
};
console.log('üéõÔ∏è Configura√ß√µes iniciais definidas:', config);
// ============================================
// üîπ PARTE 3: FUN√á√ïES PRINCIPAIS
// ============================================
// üé® FUN√á√ÉO 1: Atualizar a visualiza√ß√£o do texto
function atualizarVisualizacao() {
console.log('üîÑ Atualizando visualiza√ß√£o...');

// Aplicar alinhamento
textoPreview.style.textAlign = config.alinhamento;
// Ativar bot√£o correto
btnEsquerda.classList.remove('ativo');
btnCentro.classList.remove('ativo');
btnDireita.classList.remove('ativo');
if (config.alinhamento === 'left') btnEsquerda.classList.add('ativo');
if (config.alinhamento === 'center') btnCentro.classList.add('ativo');
if (config.alinhamento === 'right') btnDireita.classList.add('ativo');

// Pegar o texto digitado pelo usu√°rio
const texto = areaTexto.value || 'Sua obra-prima aparecer√° aqui... üåü';
// Colocar o texto na √°rea de visualiza√ß√£o
textoPreview.textContent = texto;
// üîÑ LIMPAR TODAS AS CLASSES ANTERIORES
textoPreview.className = 'texto-preview';
// üé™ APLICAR ESTILOS CONFORME AS CONFIGURA√á√ïES
if (config.estilos.negrito) {
textoPreview.classList.add('negrito');
btnNegrito.classList.add('ativo');
} else {
btnNegrito.classList.remove('ativo');
}
if (config.estilos.italico) {
textoPreview.classList.add('italico');
btnItalico.classList.add('ativo');
} else {
btnItalico.classList.remove('ativo');
}
if (config.estilos.sublinhado) {
textoPreview.classList.add('sublinhado');
btnSublinhado.classList.add('ativo');
} else {
btnSublinhado.classList.remove('ativo');
}
if (config.estilos.borda) {
textoPreview.classList.add('borda-decorativa');
btnBorda.classList.add('ativo');
} else {
btnBorda.classList.remove('ativo');
}
if (config.estilos.sombra) {
textoPreview.classList.add('sombra-texto');
btnSombra.classList.add('ativo');
} else {
btnSombra.classList.remove('ativo');
}
// üé® APLICAR CONFIGURA√á√ïES DIRETAS
textoPreview.style.fontFamily = config.fonte;
textoPreview.style.color = config.cor;
textoPreview.style.fontSize = config.tamanho + 'px';
console.log('‚ú® Visualiza√ß√£o atualizada com sucesso!');
}
// üî¢ FUN√á√ÉO 2: Atualizar contadores
function atualizarContadores() {
const texto = areaTexto.value;
const caracteres = texto.length;
const palavras = texto.trim() === '' ? 0 :
texto.trim().split(/\s+/).length;
const linhas = texto === '' ? 0 : texto.split('\n').length; // CONTA
LINHAS
contadorCaracteres.textContent = caracteres;
contadorPalavras.textContent = palavras;
contadorLinhas.textContent = linhas; // ATUALIZA CONTADOR DE LINHAS
console.log(`üìä Estat√≠sticas: ${caracteres} caracteres, ${palavras}
palavras, ${linhas} linhas`);
}
// üí¨ FUN√á√ÉO 3: Mostrar mensagens tempor√°rias
function mostrarMensagem(texto, tipo = 'sucesso') {
mensagem.textContent = texto;
mensagem.className = 'mensagem mostrar';
if (tipo === 'erro') {
mensagem.classList.add('erro');
}
// Sumir depois de 3 segundos
setTimeout(() => {
mensagem.classList.remove('mostrar');
}, 3000);
console.log(`üí¨ Mensagem: ${texto}`);
}
// üíæ FUN√á√ÉO 4: Salvar texto no navegador
function salvarTexto() {
const texto = areaTexto.value;
if (!texto.trim()) {
mostrarMensagem('‚ùå Digite algo para salvar!', 'erro');
return;
}
// Salvar no localStorage do navegador
localStorage.setItem('textoSalvo', texto);
localStorage.setItem('configuracao', JSON.stringify(config));
mostrarMensagem('üíæ Texto salvo com sucesso!');
console.log('üìÅ Texto salvo no navegador');
}
// üìÇ FUN√á√ÉO 5: Carregar texto salvo
function carregarTextoSaved() {
const textoSaved = localStorage.getItem('textoSalvo');
const configSaved = localStorage.getItem('configuracao');
if (textoSaved) {
areaTexto.value = textoSaved;
if (configSaved) {
config = JSON.parse(configSaved);
aplicarConfiguracaoSalva();
}
atualizarVisualizacao();
atualizarContadores();
mostrarMensagem('üìÇ Texto anterior carregado!');
}
}
// üîß FUN√á√ÉO 6: Aplicar configura√ß√£o salva
function aplicarConfiguracaoSalva() {
selectFonte.value = config.fonte;
corTexto.value = config.cor;
tamanhoFonte.value = config.tamanho;
valorTamanho.textContent = config.tamanho + 'px';
atualizarNomeCor(config.cor);
console.log('‚öôÔ∏è Configura√ß√£o salva aplicada:', config);
}
// üé® FUN√á√ÉO 7: Atualizar nome da cor
function atualizarNomeCor(corHex) {
const cores = {
'#000000': 'Preto',
'#ffffff': 'Branco',
'#ff0000': 'Vermelho',
'#00ff00': 'Verde',
'#0000ff': 'Azul',
'#ffff00': 'Amarelo',
'#ff00ff': 'Rosa',
'#00ffff': 'Ciano'
};
nomeCor.textContent = cores[corHex] || corHex;
}
// üòä FUN√á√ÉO 8: Adicionar emojis aleat√≥rios
function adicionarEmojis() {
const emojis = ['üê±', 'üê∂', 'ü¶Ñ', 'üåà', '‚ö°', 'üéÆ', 'üì±', 'üíª', 'üéµ',
'üé∏', 'üèÄ', '‚öΩ', 'üé≤', 'üß©', 'üé™'];
const emojiAleatorio = emojis[Math.floor(Math.random() *
emojis.length)];
// Adicionar no cursor ou no final
const inicio = areaTexto.selectionStart;
const fim = areaTexto.selectionEnd;
const texto = areaTexto.value;
areaTexto.value = texto.substring(0, inicio) + emojiAleatorio +
texto.substring(fim);
// Atualizar
atualizarVisualizacao();
atualizarContadores();
mostrarMensagem(`üòä Emoji ${emojiAleatorio} adicionado!`);
}
// üóëÔ∏è FUN√á√ÉO 9: Limpar tudo
function limparTudo() {
if (confirm('Tem certeza que quer limpar tudo? ‚ú®')) {
areaTexto.value = '';
config.estilos = {
negrito: false,
italico: false,
sublinhado: false,
borda: false,
sombra: false
};
// Resetar controles
selectFonte.value = 'Arial';
corTexto.value = '#000000';
tamanhoFonte.value = 16;
valorTamanho.textContent = '16px';
atualizarNomeCor('#000000');
// Atualizar
atualizarVisualizacao();
atualizarContadores();
mostrarMensagem('üßπ Tudo limpo! Pronto para criar algo novo!');
}
}
// üìã FUN√á√ÉO 10: Copiar texto
function copiarTexto() {
if (!areaTexto.value.trim()) {
mostrarMensagem('‚ùå N√£o h√° texto para copiar!', 'erro');
return;
}
navigator.clipboard.writeText(areaTexto.value)
.then(() => {
mostrarMensagem('üìã Texto copiado para a √°rea de transfer√™ncia!');
})
.catch(err => {
mostrarMensagem('‚ùå Erro ao copiar texto', 'erro');
console.error('Erro ao copiar:', err);
});
}
// üé≠ FUN√á√ÉO 11: Mudar tema
function mudarTema(novoTema, corFundo) {
// Remover todos os temas anteriores
document.body.classList.remove('tema-escuro', 'tema-azul', 'tema-rosa',
'tema-verde');
// Aplicar novo tema
if (novoTema !== 'claro') {
document.body.classList.add(`tema-${novoTema}`);
}
config.tema = novoTema;
mostrarMensagem(`üé≠ Tema ${novoTema} ativado!`);
}

// ============================================
// üîπ PARTE 4: CONFIGURAR EVENT LISTENERS
// ============================================
// ‚å®Ô∏è EVENTO 1: Digita√ß√£o em tempo real
areaTexto.addEventListener('input', function() {
console.log('‚å®Ô∏è Usu√°rio est√° digitando...');
atualizarVisualizacao();
atualizarContadores();
});
// üÖ±Ô∏è EVENTO 2: Bot√£o Negrito
btnNegrito.addEventListener('click', function() {
console.log('üÖ±Ô∏è Negrito clicado');
config.estilos.negrito = !config.estilos.negrito;
atualizarVisualizacao();
});
// ‚ÑπÔ∏è EVENTO 3: Bot√£o It√°lico
btnItalico.addEventListener('click', function() {
console.log('‚ÑπÔ∏è It√°lico clicado');
config.estilos.italico = !config.estilos.italico;
atualizarVisualizacao();
});
// üîó EVENTO 4: Bot√£o Sublinhado
btnSublinhado.addEventListener('click', function() {
console.log('üîó Sublinhado clicado');
config.estilos.sublinhado = !config.estilos.sublinhado;
atualizarVisualizacao();
});
// üî§ EVENTO 5: Mudar fonte
selectFonte.addEventListener('change', function() {
config.fonte = this.value;
console.log('üî§ Fonte alterada para:', config.fonte);
atualizarVisualizacao();
});
// üé® EVENTO 6: Mudar cor
corTexto.addEventListener('input', function() {
config.cor = this.value;
atualizarNomeCor(config.cor);
console.log('üé® Cor alterada para:', config.cor);
atualizarVisualizacao();
});
// üìè EVENTO 7: Mudar tamanho
tamanhoFonte.addEventListener('input', function() {
config.tamanho = this.value;
valorTamanho.textContent = config.tamanho + 'px';
console.log('üìè Tamanho da fonte:', config.tamanho + 'px');
atualizarVisualizacao();
});
// üòä EVENTO 8: Bot√£o Emojis
btnEmojis.addEventListener('click', adicionarEmojis);
// üñºÔ∏è EVENTO 9: Bot√£o Borda
btnBorda.addEventListener('click', function() {
config.estilos.borda = !config.estilos.borda;
console.log('üñºÔ∏è Borda:', config.estilos.borda ? 'ATIVADA' :
'DESATIVADA');
atualizarVisualizacao();
});
// üí´ EVENTO 10: Bot√£o Sombra
btnSombra.addEventListener('click', function() {
config.estilos.sombra = !config.estilos.sombra;
console.log('üí´ Sombra:', config.estilos.sombra ? 'ATIVADA' :
'DESATIVADA');
atualizarVisualizacao();
});

// üé≠ EVENTO 11: Bot√µes de tema
botoesTemas.forEach(botao => {
botao.addEventListener('click', function() {
const tema = this.getAttribute('data-tema');
const cor = this.getAttribute('data-cor');
mudarTema(tema, cor);
});
});

// üíæ EVENTO 12: Salvar texto
btnSalvar.addEventListener('click', salvarTexto);

// üóëÔ∏è EVENTO 13: Limpar tudo
btnLimpar.addEventListener('click', limparTudo);

// üìã EVENTO 14: Copiar texto
btnCopiar.addEventListener('click', copiarTexto);


// üéØ EVENTOS DE ALINHAMENTO
btnEsquerda.addEventListener('click', function() {
config.alinhamento = 'left';
atualizarVisualizacao();
});
btnCentro.addEventListener('click', function() {
config.alinhamento = 'center';
atualizarVisualizacao();
});
btnDireita.addEventListener('click', function() {
config.alinhamento = 'right';
atualizarVisualizacao();
});


// ============================================
// üîπ PARTE 5: INICIALIZA√á√ÉO FINAL
// ============================================
console.log('üöÄ Inicializando editor...');
// Configura√ß√µes iniciais
atualizarNomeCor('#000000');
carregarTextoSaved();
// Mostrar mensagem de boas-vindas
setTimeout(() => {
mostrarMensagem('‚ú® Bem-vindo ao Editor Criativo! Comece a digitar...');
}, 1000);
console.log('‚úÖ Editor criativo totalmente carregado e pronto!');